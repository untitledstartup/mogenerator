// DO NOT EDIT. This file is machine-generated and constantly overwritten.
// Make changes to <$managedObjectClassName$>.swift instead.

import CoreData
<$if hasAdditionalHeaderFile$>import <$additionalHeaderFileName$><$endif$>
<$if hasCustomBaseCaseImport$>import <$baseClassImport$><$endif$>

public extension <$managedObjectClassName$> {

    <$if noninheritedAttributes.@count > 0$>
    public enum Attributes: String {<$foreach Attribute noninheritedAttributes do$>
        case <$Attribute.name.initialCapitalString$> = "<$Attribute.name$>"<$endforeach do$>
    }
    <$endif$>

    <$if noninheritedRelationships.@count > 0$>
    public enum Relationships: String {<$foreach Relationship noninheritedRelationships do$>
        case <$Relationship.name.initialCapitalString$> = "<$Relationship.name$>"<$endforeach do$>
    }
    <$endif$>

    <$if noninheritedFetchedProperties.@count > 0$>
    public enum FetchedProperties: String {<$foreach FetchedProperty noninheritedFetchedProperties do$>
        case <$FetchedProperty.name.initialCapitalString$> = "<$FetchedProperty.name$>"<$endforeach do$>
    }
    <$endif$>

    <$if hasUserInfoKeys$>
    public enum UserInfo: String {<$foreach UserInfo userInfoKeyValues do$>
        case <$UserInfo.key.initialCapitalString$> = "<$UserInfo.key$>"<$endforeach do$>
    }
    <$endif$>

    // MARK: - Class methods

    <$if (hasCustomSuperclass || (hasCustomSuperentity && TemplateVar.overrideBaseClass))$>override <$endif$>public class var entityName: String {
        return "<$name$>"
    }

    <$if (hasCustomSuperclass || (hasCustomSuperentity && TemplateVar.overrideBaseClass))$>override <$endif$>public class func entity(managedObjectContext: NSManagedObjectContext!) -> NSEntityDescription! {
        return NSEntityDescription.entityForName(entityName, inManagedObjectContext: managedObjectContext)
    }

    // MARK: - Life cycle methods

    public convenience init(managedObjectContext: NSManagedObjectContext!) {
        let entity = <$managedObjectClassName$>.entity(managedObjectContext)
        self.init(entity: entity, insertIntoManagedObjectContext: managedObjectContext)
    }

    // MARK: - Properties
<$foreach Attribute noninheritedAttributes do$>
<$if Attribute.hasDefinedAttributeType$>
<$if Attribute.hasScalarAttributeType$>
<$if Attribute.isReadonly$>
    public var <$Attribute.name$>: <$Attribute.scalarAttributeType$>
    {
        self.willAccessValueForKey(<$managedObjectClassName$>Attributes.<$Attribute.name$>.rawValue)
        let <$Attribute.name$> = self.primitiveValueForKey(<$managedObjectClassName$>Attributes.<$Attribute.name$>.rawValue) as? NSNumber
        self.didAccessValueForKey(<$managedObjectClassName$>Attributes.<$Attribute.name$>.rawValue)
        return <$Attribute.name$>
    }
<$else$>
    @NSManaged public
    var <$Attribute.name$>: <$Attribute.scalarAttributeType$>
<$endif$>
<$else$>
<$if Attribute.isReadonly$>
    public var <$Attribute.name$>: <$Attribute.objectAttributeType$><$if Attribute.isOptional$>?<$endif$>
    {
        self.willAccessValueForKey(<$managedObjectClassName$>Attributes.<$Attribute.name$>.rawValue)
        let <$Attribute.name$> = self.primitiveValueForKey(<$managedObjectClassName$>Attributes.<$Attribute.name$>.rawValue) as? <$Attribute.objectAttributeType$>
        self.didAccessValueForKey(<$managedObjectClassName$>Attributes.<$Attribute.name$>.rawValue)
        return <$Attribute.name$>
    }
<$else$>
    @NSManaged public
    var <$Attribute.name$>: <$Attribute.objectAttributeType$><$if Attribute.isOptional$>?<$endif$>
<$endif$>
<$endif$>
    // func validate<$Attribute.name.initialCapitalString$>(value: AutoreleasingUnsafeMutablePointer<AnyObject>, error: NSErrorPointer) -> Bool {}
<$endif$>
<$endforeach do$>

    // MARK: - Relationships
<$foreach Relationship noninheritedRelationships do$>
<$if Relationship.isToMany$>
    @NSManaged public
    var <$Relationship.name$>: <$Relationship.immutableCollectionClassName$>

    public var <$Relationship.name$>Set: <$Relationship.mutableCollectionClassName$>! {
        self.willAccessValueForKey("<$Relationship.name$>")
<$if Relationship.jr_isOrdered$>
        let result = self.mutableOrderedSetValueForKey("<$Relationship.name$>")
<$else$>
        let result = self.mutableSetValueForKey("<$Relationship.name$>")
<$endif$>
        self.didAccessValueForKey("<$Relationship.name$>")
        return result
    }
<$else$>
    @NSManaged public
    var <$Relationship.name$>: <$Relationship.destinationEntity.managedObjectClassName$><$if Relationship.isOptional$>?<$endif$>

    // func validate<$Relationship.name.initialCapitalString$>(value: AutoreleasingUnsafeMutablePointer<AnyObject>, error: NSErrorPointer) -> Bool {}
<$endif$>
<$endforeach do$>

<$foreach FetchRequest prettyFetchRequests do$>
<$if FetchRequest.singleResult$>
    class func fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: NSManagedObjectContext!<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.type$><$endforeach do2$>) -> AnyObject? {
        return self.fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.name$><$endforeach do2$>, error: nil)
    }

    class func fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: NSManagedObjectContext!<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.type$><$endforeach do2$>, error outError: NSErrorPointer) -> AnyObject? {
        let model = managedObjectContext.persistentStoreCoordinator!.managedObjectModel
        let substitutionVariables = [<$if FetchRequest.hasBindings$><$foreach Binding FetchRequest.bindings do2$>
            "<$Binding.name$>": <$Binding.name$>,
<$endforeach do2$><$endif$>        ]

        let fetchRequest = model.fetchRequestFromTemplateWithName("<$FetchRequest.name$>", substitutionVariables: substitutionVariables)
        assert(fetchRequest != nil, "Can't find fetch request named \"<$FetchRequest.name$>\".")

        var error: NSError? = nil
        var result: AnyObject? = nil
        let results = managedObjectContext.executeFetchRequest(fetchRequest!, error: &error)

        if error != nil {
            outError.memory = error
        } else {
            switch results!.count {
            case 0:
                // Nothing found matching the fetch request. That's cool, though: we'll just return nil.
                break
            case 1:
                result = results![0]
            default:
                NSLog("WARN fetch request <$FetchRequest.name$>: 0 or 1 objects expected, %lu found (substitutionVariables:%@, results:%@)",
                    results!.count,
                    substitutionVariables,
                    results!)
            }
        }

        return result
    }
<$else$>
    class func fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: NSManagedObjectContext!<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.type$><$endforeach do2$>) -> [AnyObject] {
        return self.fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.name$><$endforeach do2$>, error: nil)
    }

    class func fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: NSManagedObjectContext!<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.type$><$endforeach do2$>, error outError: NSErrorPointer) -> [AnyObject]! {
        let model = managedObjectContext.persistentStoreCoordinator!.managedObjectModel
        let substitutionVariables : [NSObject : AnyObject] = [<$if FetchRequest.hasBindings$><$foreach Binding FetchRequest.bindings do2$>
            "<$Binding.name$>": <$Binding.name$>,
<$endforeach do2$><$else$>:<$endif$>]

        let fetchRequest = model.fetchRequestFromTemplateWithName("<$FetchRequest.name$>", substitutionVariables: substitutionVariables)
        assert(fetchRequest != nil, "Can't find fetch request named \"<$FetchRequest.name$>\".")

        var error: NSError? = nil
        let results = managedObjectContext.executeFetchRequest(fetchRequest!, error: &error)

        if error != nil {
            outError.memory = error
        }

        return results
    }
<$endif$>
<$endforeach do$>

<$foreach FetchedProperty noninheritedFetchedProperties do$>
    @NSManaged public
    let <$FetchedProperty.name$>: [<$FetchedProperty.entity.managedObjectClassName$>]
<$endforeach do$>

}
